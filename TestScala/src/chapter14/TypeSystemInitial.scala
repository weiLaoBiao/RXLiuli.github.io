package chapter14

/**
  * Created by rxliuli on 17-6-12.
  */
// 类型系统初步
object TypeSystemInitial {
  def default(): Unit = {
    /**
      * Scala 是一种静态类型语言。它的类型系统可以说是所有编程语言中最复杂的,
      * 一部分原因是它将函数式编程和面向对象编程的思想结合了起来。
      * 它的类型系统力求逻辑完备、完整、一致,并修复了 Java 类型系统的一些限制。
      * 理想情况下,类型系统应该具有足够的表达能力,来防止程序处于无效状态。
      * 它将在编译时加强限制,使得运行时的失败不会发生。
      * 在实践中,我们离这一目标非常远,但 Scala 类型系统向这个长期目标又迈进了一步。
      * 不过, Scala 的类型系统可能一开始看起来很吓人。这是 Scala 语言中最有争议的特性。
      * 当人们声称, Scala 很 “ 复杂 ” 时,他们通常指的就是其类型系统。
      * 幸运的是,类型推断为我们隐藏了很多细节。
      * 尽管最终你需要熟悉类型系统的大部分结构,但对 Scala 的运用并不需要精通类型系统。
      */
    // Scala 的类型系统太过于庞大了
    val i = 0 // 简单的一句声明语句不知道后面要进行什么样的执行过程
    println((1 to i).find(_ % 2 == 0).getOrElse(-1)) //类库中大量的使用了 Option 容器
  }
}
